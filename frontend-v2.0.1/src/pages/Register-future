import { useState } from "react";
import {
  Box,
  InputLabel,
  Select,
  Button,
  TextField,
  Typography,
  useMediaQuery,
  useTheme,
  MenuItem,
  FormControl,
  FormHelperText,
} from "@mui/material";
import { TbWorld } from "react-icons/tb";
import { Formik } from "formik";
import * as yup from "yup";


//Schema for registration validation
    const registerSchema = yup.object().shape({
    firstName: yup
                .string()
                .required("First name is required"),
    lastName: yup
                .string()
                .required("Last name is required"),
    email: yup
                .string()
                .email("Invalid Credentials")
                .required("Email is required"),
    password: yup.string()
                .min(6)
                .max(20)
                .required("Add your password"),
    location: yup
                .string()
                .required("Add your location"),
    role: yup
                .mixed()
                .oneOf(["student", "trainer"])
                .required("user Role is required"),
    picture: yup.string()
                .required("required")
})


function Register() {
const [formData, setFormData] = useState({
       firstName: "",
       lastName: "",
       location: "",
       password: "",
       password2: "",
       email: "",
       role: "",
     });


const [roleEnum, setRoleEnum] = useState("");
const { palette } = useTheme();
const isNonMobileScreens = useMediaQuery("(min-width: 1000px)");

const { firstName, lastName, location, password, password2, email, role } = formData;

  const onChange = (e) => {
    setFormData((prevState) => ({
        ...prevState, [e.target.name]: e.target.value
    }))
  }
  const handleRoleChange = (event) => {
    setRoleEnum(event.target.value);
  };

  // const handleFormSubmit = async (values, onSubmitProps) => {
  //   await register(values, onSubmitProps);
  // }
  return (
  //   onSubmit={handleFormSubmit}
    <Formik initialValues={formData} validationSchema={registerSchema}>
      {({
        values,
        errors,
        touched,
        handleBlur,
        handleChange,
        handleSubmit,
        setFieldValue,
        resetForm,
      }) => (
        <form onSubmit={handleSubmit}>
          <Box>
            <>
              <TextField
                label="First Name"
                onBlur={handleBlur}
                onChange={onChange}
                value={firstName}
                name="firstName"
                error={Boolean(touched.firstName) && Boolean(errors.firstName)}
                helperText={touched.firstName && errors.firstName}
                sx={{ gridColumn: "span 2" }}
              />
              <TextField
                label="Last Name"
                onBlur={handleBlur}
                onChange={onChange}
                value={lastName}
                name="lastName"
                error={Boolean(touched.lastName) && Boolean(errors.lastName)}
                helperText={touched.lastName && errors.lastName}
                sx={{ gridColumn: "span 2" }}
              />
              <TextField
                label="Location"
                onBlur={handleBlur}
                onChange={onChange}
                value={location}
                name="location"
                error={Boolean(touched.location) && Boolean(errors.location)}
                helperText={touched.location && errors.location}
                sx={{ gridColumn: "span 4" }}
              />
              <FormControl label="Role" required sx={{ gridColumn: "span 2" }}>
                <InputLabel>Role</InputLabel>
                <Select
                  value={roleEnum}
                  label="Role *"
                  onChange={handleRoleChange}
                >
                  <MenuItem value={"student"}>Student</MenuItem>
                  <MenuItem value={"trainer"}>Trainer</MenuItem>
                </Select>
                <FormHelperText>Required</FormHelperText>
              </FormControl>
              {/* <TextField
                label="Occupation"
                onBlur={handleBlur}
                onChange={handleChange}
                value={values.occupation}
                name="occupation"
                error={
                  Boolean(touched.occupation) && Boolean(errors.occupation)
                }
                helperText={touched.occupation && errors.occupation}
                sx={{ gridColumn: "span 4" }}
              /> */}
              <Box
                gridColumn="span 4"
                border={`1px solid ${palette.neutral.medium}`}
                borderRadius="5px"
                p="1rem"
              ></Box>
            </>
            <TextField
              label="Email"
              onBlur={handleBlur}
              onChange={onChange}
              value={email}
              name="email"
              error={Boolean(touched.email) && Boolean(errors.email)}
              helperText={touched.email && errors.email}
              sx={{ gridColumn: "span 4" }}
            />
            <TextField
              label="Password"
              type="password"
              onBlur={handleBlur}
              onChange={handleChange}
              value={password}
              name="password"
              error={Boolean(touched.password) && Boolean(errors.password)}
              helperText={touched.password && errors.password}
              sx={{ gridColumn: "span 4" }}
            />
            <TextField
              label="Confirm Password"
              type="password"
              onBlur={handleBlur}
              onChange={handleChange}
              value={password}
              name="password"
              error={Boolean(touched.password) && Boolean(errors.password)}
              helperText={touched.password && errors.password}
              sx={{ gridColumn: "span 4" }}
            />
          </Box>

          {/* BUTTONS */}
          <Box>
            <Button
              fullWidth
              type="submit"
              sx={{
                m: "2rem 0",
                p: "1rem",
                backgroundColor: palette.primary.main,
                color: palette.background.alt,
                "&:hover": { color: palette.primary.main },
              }}
            >
              {/* {isLogin ? "LOGIN" : "REGISTER"} */}
            </Button>
            <Typography
              sx={{
                textDecoration: "underline",
                color: palette.primary.main,
                "&:hover": {
                  cursor: "pointer",
                  color: palette.primary.light,
                },
              }}
            >
              {/* {isLogin
                ? "Don't have an account? Sign Up here."
                : "Already have an account? Login here."} */}
            </Typography>
          </Box>
        </form>
      )}
    </Formik>
  )
  }



export default Register